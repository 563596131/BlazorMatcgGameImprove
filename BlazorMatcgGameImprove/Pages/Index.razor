@page "/"
@using System.Timers
@using AntDesign
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Linq;
@using System.Reflection;
@using System.Security.Cryptography.X509Certificates;
@using System.Text.Json;
@using System.Threading.Tasks;
@inject IMessageService _message
@inject NotificationService _notice
@inject IJSRuntime JS
@inject ILocalStorageService localStorage
@inject ISyncLocalStorageService SynLocalStorageService

<style>
    .main {
        width: 800px;
        margin: 0 auto;
    }

    .row {
        width: 400px;
        margin-right: 15px;
    }

    .btn {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .button {
        display: flex;
        margin: 10px
    }

    .btn-style {
        margin: 10px;
        border-radius: 5px;
        border: none;
        height: 40px;
        width: 100px;
    }

        .btn-style:hover {
            background: #0e7eff;
            color: #fff;
        }

    .rank {
        position: relative;
        width: 200px;
        height: 400px;
        overflow: auto;
        background: #ffffff;
        border-radius: 12px;
        padding: 0px 16px 14px 16px;
        box-shadow: 0px 6px 28px 0px rgb(0 0 0 / 12%), 0px 6px 16px -8px rgb(0 0 0 / 8%);
    }

    .rank-title {
        width: 165px;
        position: absolute;
        background: #ffffff;
        padding-left: 50px;
    }

    .flex {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .isHidden {
        visibility: hidden;
    }

    .flex:focus .isHidden {
        visibility: visible !important;
    }

    .isHidden:empty {
        visibility: visible !important;
        background: #ccc;
        height: 90%;
        width: 100%;
        margin: 0;
    }
</style>

<div class="main">
    <div class="button">
        <button class="btn-style" @onclick="SelectEasyAsync">easy</button>
        <button class="btn-style" @onclick="SelectHardAsync">hard</button>
        <button class="btn-style" @onclick="SelectCheat">cheat</button>
        <span style="display:flex;align-items: center;margin-left:15px;font-weight:700">
            excessNum:<Input Bordered="false" TValue="int" @bind-Value="@excessNum" />
        </span>
    </div>
    @if (isPlay)
    {
        <div style="display:flex;">
            <div class="row" style="pointer-events:@isClick;width:@levelWidth;">
                @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
                {
                    var animal = shuffledAnimals[animalNumber];
                    var uniqueDescription = $"Button #{animalNumber}";

                    <div class="clo-3">
                        <div @onclick="@(() => ButtonClickAsync(animal, uniqueDescription))"
                             type="button" class="btn btn-outline-dark flex" tabindex="1">
                            <h1 class="isHidden" id="@($"cheat{animalNumber}")">
                                @animal
                            </h1>
                        </div>
                    </div>
                }
            </div>
            <div class="rank">
                <h3 class="rank-title">Rank</h3>
                <div style="margin-top:37px;"></div>
                <div>
                    @{ var index = 0;
                                        foreach (var item in rankLists)
                                        {
                                            index++;
                                            <div>
                                                <span style="margin-left:40px;">@index</span><span style="margin-left:40px;">@item</span>
                                            </div> }
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <h2 style="color:deepskyblue">The game does not start,Please select Easy or Hard!</h2>
    }

    <div class="row">
        <h1>@overString </h1>
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @counter s</h2>
    </div>
    <div class="row">
        <h2>Score: @score</h2>
    </div>
</div>

@code {
    private bool isPlay;
    private string isClick = "none";
    private string levelWidth = "400px";
    private string overString;
    private int excessNum = 32; // the numbers of cheat
    private double score = 0;
    private int cheatNum = 0;
    private int randomIntA = 0;
    private int randomIntB = 0;
    private int randomNum = 0;
    private double difficultNum = 1; // easy? hard?
    private string randomClass;
    private Random random = new Random();
    private List<string> animalEmoji = new List<string>()
            {
                "🐶", "🐶",
                "🐺", "🐺",
                "🐮", "🐮",
                "🦊", "🦊",
                "🐱", "🐱",
                "🦁", "🦁",
                "🐯", "🐯",
                "🐹", "🐹",
            };

    private List<string> shuffledAnimals = new List<string>();
    private List<double> rankLists = new();
    private int matchesFound = 0;
    private Timer aTimer;
    private int counter = 100;

    protected override async Task OnInitializedAsync()
    {
        string jsonList = JsonSerializer.Serialize(rankLists);
        Console.WriteLine(jsonList);
        aTimer = new Timer(1000);
        SetUpGame();
    }

    private void SetUpGame()
    {
        Random ranom = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private async Task ButtonClickAsync(string animal, string animalDescription)
    {
        Console.WriteLine(lastAnimalFound);
        Console.WriteLine(levelWidth);
        Console.WriteLine(excessNum);
        if ((levelWidth == "400px" && excessNum == 32) || (levelWidth == "600px" && excessNum == 72))
        {
            Console.WriteLine("Timer Start");
            StartTime();
        }
        if (randomClass != null)
        {
            await JS.InvokeVoidAsync("closePreRandom", randomClass);
        }
        if (excessNum > 0)
        {
            excessNum--;
        }
        if (lastAnimalFound == string.Empty)
        {
            // First selection of pair
            lastAnimalFound = animal;
            lastDescription = animalDescription;
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair.
            lastAnimalFound = string.Empty;
            // Replace found animals with empty string to hide them
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            matchesFound++;
            if (levelWidth == "400px" && matchesFound == 8 || levelWidth == "600px" && matchesFound == 18)
            {
                randomClass = null;
                isPlay = false;
                aTimer.Elapsed -= CountDownTimer;
                aTimer.Enabled = false;
                overString = "Win, Play Agian?";
                score = counter * 10 * difficultNum - cheatNum * 20;
                rankLists.Add(score);
                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that don't match
            // Resrt selection
            lastAnimalFound = string.Empty;
        }
        if (excessNum == 0)
        {
            randomClass = null;
            isPlay = false;
            isClick = "none";
            aTimer.Elapsed -= CountDownTimer;
            aTimer.Enabled = false;
            overString = "Defeat, Game Over";
            // score cleared after fail
            if (levelWidth == "400px" && matchesFound == 8 || levelWidth == "600px" && matchesFound == 18)
            {
                score = counter * 10 * difficultNum - cheatNum * 20;
            }
            else
            {
                score = 0;
            }
            rankLists.Add(score);
            StateHasChanged();
        }
    }
    private void StartTime()
    {
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }
    // countdownTimer
    private void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            aTimer.Elapsed -= CountDownTimer;
            aTimer.Enabled = false;
            // The function that needs to be triggered after the countdown ends
            isPlay = false;
            randomClass = null;
            isClick = "none";
            overString = "Defeat, Game Over";
            // Score cleared to 0 after failure
            if (levelWidth == "400px" && matchesFound == 8 || levelWidth == "600px" && matchesFound == 18)
            {
                score = counter * 10 * difficultNum - cheatNum * 20;
            }
            else
            {
                score = 0;
            }
            rankLists.Add(score);
        }
        InvokeAsync(StateHasChanged); // force refresh
    }

    private async Task SelectEasyAsync()
    {
        difficultNum = 1;  // easy version
        if (aTimer.Enabled == true)
        {
            aTimer.Elapsed -= CountDownTimer;
            aTimer.Enabled = false;
        }
        cheatNum = 0;
        if (randomClass != null)
        {
            await JS.InvokeVoidAsync("closePreRandom", randomClass);
        }
        animalEmoji = new List<string>()
                {
                    "🐶", "🐶",
                    "🐺", "🐺",
                    "🐮", "🐮",
                    "🦊", "🦊",
                    "🐱", "🐱",
                    "🦁", "🦁",
                    "🐯", "🐯",
                    "🐹", "🐹",
                };
        SetUpGame();
        excessNum = 32;
        levelWidth = "400px";
        isClick = "auto";
        counter = 100; // easy time
        isPlay = true;
    }
    private async Task SelectHardAsync()
    {
        difficultNum = 1.5; // hard version
        if (aTimer.Enabled == true)
        {
            aTimer.Elapsed -= CountDownTimer;
            aTimer.Enabled = false;
        }
        cheatNum = 0;
        if (randomClass != null)
        {
            await JS.InvokeVoidAsync("closePreRandom", randomClass);
        }
        animalEmoji = new List<string>()
                {
                    "🐶", "🐶",
                    "🐺", "🐺",
                    "🐮", "🐮",
                    "🦊", "🦊",
                    "🐱", "🐱",
                    "🦁", "🦁",
                    "🐯", "🐯",
                    "🐹", "🐹",
                    "🐠", "🐠",
                    "🦔", "🦔",
                    "🙊", "🙊",
                    "🦅", "🦅",
                    "🦈", "🦈",
                    "🐉", "🐉",
                    "🐇", "🐇",
                    "🚀", "🚀",
                    "🤡", "🤡",
                    "🦄", "🦄",
                };
        SetUpGame();
        excessNum = 72;  // more cheat for hard mod
        levelWidth = "600px";
        isClick = "auto";
        counter = 200;  // hard time
        isPlay = true;
        StateHasChanged();
    }
    string Message { get; set; } = string.Empty;

    private async void SelectCheat()
    {
        if (isPlay)
        {
            //Record the number of cheating
            cheatNum++;
            //First judge whether it is easy or hard
            //Easy, hard are different, levelWidth is different, range is different
            if (levelWidth == "400px")
            {
                randomIntA = 0;
                randomIntB = 15;
            }
            else
            {
                randomIntA = 0;
                randomIntB = 35;
            }
            //Pick a random number in the range
            randomNum = random.Next(randomIntA, randomIntB);
            //Each random number corresponds to cheat{animalNumber}class
            //Let the attribute of the class be visible, and the flip is realized
            randomClass = $"cheat{randomNum}";
            Console.WriteLine("----" + cheatNum);
            lastDescription = $"Button #{randomNum}";
            Console.WriteLine(randomClass);
            await JS.InvokeVoidAsync("HelloWorld");
            await JS.InvokeVoidAsync("displayRandom", randomClass);
        }
        else
        {
            await JS.InvokeVoidAsync("ScriptAlert", "You can't cheat before the game starts");
        }
    }
}

